---
title: "LOCAETA report: Louisiana CCS"
format:
  html:
    embed-resources: true
theme: cosmos
#  html:
code-fold: true
execute:
  echo: false
jupyter: python3
---


Author: Yunha Lee (yunha.lee@carbonsolutionsllc.com)

Date: May 8, 2025

Disclaimer : This report will be updated with new LA emissions soon. 

<style>
.quarto-figure {
  margin-bottom: 2em; /* Adjust as needed */
}
</style>

```{python}
#| warning: false

import geopandas as gpd
import pandas as pd

# set run_name
run_name = 'LA_CCS'
run_list = ['LA_CCS', 'LA_CCS_noNH3']
#run_list = ['CO_CCS', 'CO_CCS_wo_NH3_VOC', 'CO_Suncor_CCS_wo_NH3_VOC','CO_Cherokee_CCS_wo_NH3_VOC', 'NEI_no_Landfill_2001411']

# Define all output paths
emis_output_path = f"outputs/emissions/{run_name}"
inmap_output_path = f"outputs/model_analysis/"
benmap_inc_output_path = f"outputs/BenMAP/county/incidence_results/"
benmap_value_output_path = f"outputs/BenMAP/county/valuation_results/"

# read base and sens emission scenarios
gdf_emis = gpd.read_file(
  '/Users/yunhalee/Documents/LOCAETA/CS_emissions/new_LA_point_CCS_reduced_emis.shp')
 #'/Users/yunhalee/Documents/LOCAETA/CS_emissions/Colorado_point_CCS_reduced_emis.shp')

# Reset index to ensure proper comparison
gdf_emis.reset_index(drop=True, inplace=True)
   

```


# Introduction 
Decarbonization strategies have beome a critical approach for reducing carbon dioxide (CO2) emissions and achieving net zero climate goals. These strategies include carbon capture and storage (CCS), industrial electrification, facility decommissioning, and fuel-switching to options such as clean hydrogen. Beyond CO2, decarbonization also affects emissions of conventional air pollutants such as particulate matter (PM), nitrogen oxides (NOx), and sulfur oxides (SOx). Given the increasing emphasis on advancing environmental justice through climate policy, it is essential to evaluate the socioeconomic impact implications of these strategies as well as the social costs associated with each technology.

The primary objectives of this study are to assess the socioeconomic and air quality impacts of decarbonization strategies - with a focus on on public health, and equity - and to identify the most effective decarbonization technologies for specific regions.

# Emission Changes by Key Pollutants

We estimated changes in air pollutant emissions resulting from amine-based CCS applied to industrial point-source across the United States. This analysis utilizes the CO2 National Capture Opportunities and Readiness Database (CO2NCORD) and a new co-pollutant emissions reduction approach developed for the LOCal Air
Emissions Tracking Atlas (LOCAETA). The CO2NCORD tool estimates capturable CO2 emissions and the cost-per-tonne for industrial point sources.  Using LOCAETA's co-benefits modeling framework, we estimate the reduction in PM2.5, NOx, and SOx emissions at each facility, as well as the additional ammonia and VOCs produced by amine-based carbon capture. 
The equation below details how we compute the new emissions by the amine-based CCS: 

$$ NO_{x} \text{ reduction} = \text{NEI } NO_{x} \text{ emission} \times 0.28 $$
$$ SO_{2} \text{ reduction} = \text{NEI } SO_{2} \text{ emission} \times 0.99 $$
$$ PM25FIL \text{ reduction} = \text{NEI PM25FIL emission} \times 0.97 $$ 
$$ PM25CON \text{ reduction} = \text{NEI PM25CON emission} \times 0.94 $$ 

$$ VOC \text{ increase} = \text{CO2NCORD } \text{MtCO}_{2,\text{capturable}} \times 0.0000022 \times 10^6 $$
$$ NH_{3} \text{ increase} = \text{CO2NCORD } \text{MtCO}_{2,\text{capturable}} \times 0.00021 \times 10^6 $$



```{python}


def subset_pollutants_with_difference(df, pollutants):
    mask = False  # Initialize a mask to filter rows
    for pollutant in pollutants:
        col_current = pollutant
        col_old = f'{pollutant}_old'
        
        if col_current in df.columns and col_old in df.columns:
            # Check where the pollutant and its "_old" version differ
            mask |= (df[col_current] != df[col_old])

    # Subset the dataframe based on the mask
    return df[mask]

pollutants = ['VOC', 'NOx', 'NH3', 'SOx', 'PM2_5']
subset_df = subset_pollutants_with_difference(gdf_emis, pollutants)


import os, sys

package_path = os.path.abspath('/Users/yunhalee/Documents/LOCAETA/LOCAETA_AQ/LOCAETA_AQ')
if package_path not in sys.path:
    sys.path.append(package_path)

import emission_postprocess

stats_df = emission_postprocess.plot_spatial_distribution_percent_change_with_basemap(subset_df, emis_output_path)
emission_postprocess.plot_spatial_distribution_relative_difference_with_basemap(subset_df, emis_output_path)

```


```{python}


from IPython.display import display, Markdown

markdown_text = f"The number of facilties applied with the amine-based CCS technology is **{len(subset_df['EIS_ID'].unique())}**"

# Display the entire paragraph in one go
display(Markdown(markdown_text))
```

@tbl-total-emissions-changes summarizes the percent change in total emissions by pollutants resulting from amine-based CCS implementation in the NEI2020 emission inventory. These changes reflect only the emissions source categories (i.e., Source Classification Code) affected by the CCS implementation. Percent changes are computed using the difference between emissions with CCS and the original NEI2020 emissions, divided by the NEI2020 values. 



```{python}
#| label: tbl-total-emissions-changes
#| tbl-cap: Percent changes of air quality emissions at all facilities affected by amine-based CCS  
#| tbl-colwidths: [20,20]

from great_tables import GT
GT(stats_df)
```



```{python}
from IPython.display import display, Markdown

pollutants = ['PM2_5', 'NOx',  'SOx',  'NH3', 'VOC'] # 


markdown_text = f""
                 
for index, row in stats_df.iterrows():
    pollutant = row['Pollutant']
    percent_chgs = row['Total Percent Change [%]']
    # Use Markdown to display the computed value
    markdown_text +=f"For {pollutant}, the percent change is **{percent_chgs :.0f}**. "


# Display the entire paragraph in one go
display(Markdown(markdown_text))
```

@fig-total-emis-diff shows the absolute amount of total emissions changes by species. 

```{python}
#| label: fig-total-emis-diff
#| fig-cap: "Changes in emissions at each facility (EIS ID) by the amine-based CCS implementation"

from IPython.display import display, HTML
img_path = f"{emis_output_path}/Total_Difference.png"
html = f'<figure><img src="{img_path}" alt="Changes in Total Emissions" class="center" width="800"></figure>'
display(HTML(html))

```




```{python}
from IPython.display import display, Markdown

pollutants_old = [f'{pollutant}_old' for pollutant in pollutants]

# Calculate total sums for each pollutant
totals = {pollutant: subset_df[pollutant].sum() for pollutant in pollutants_old}
totals_CCS ={pollutant: subset_df[pollutant].sum() for pollutant in pollutants}

markdown_text = ""
                 
for i, pollutant in enumerate(pollutants):
    total_original = totals[f'{pollutant}_old']
    change = totals_CCS[f'{pollutant}'] - total_original

    # Use Markdown to display the computed value
    markdown_text +=f"For {pollutant}, the total NEI2020 emissions are **{total_original:.0f}** in tons, and it is changed by **{change:.0f}** with amine-based CCS technology. "


# Display the entire paragraph in one go
display(Markdown(markdown_text))
```


@fig-spatial-pm25-emis-changes shows the percent change in primary PM2.5 emissions at facility, which mostly ranging from approximately -97% to -95%. The percent changes for NOₓ and SOₓ are not shown together since their reductions are constant across all facilities at -28% and -99%, respectively. 


```{python}
#| label: fig-spatial-pm25-emis-changes
#| fig-cap: "Spatial distribution of PM2.5 emission changes from NEI2020 emissions to CCS emissions"

import matplotlib.pyplot as plt
import matplotlib.image as img

# Emissions species
pollutants = ["PM2_5"]

for pollutant in pollutants:
    img_path = f"{emis_output_path}/{pollutant}_percent_change_with_basemap.png"

    # Read the PNG image file
    image = img.imread(img_path)

    # Display the image
    plt.imshow(image, interpolation='nearest', aspect='auto')
    plt.axis('off')  # This hides axes and ticks
    plt.tight_layout(pad=0)  # Remove extra padding
    plt.show()
```

For NH₃ and VOCs, which have zero emissions at some facilities in  NEI2020 records, percent changes are calculated using CCS emissions as the denominator. These are presented in @fig-spatial-nh3-voc-emis-changes.


```{python}
#| label: fig-spatial-nh3-voc-emis-changes
#| fig-cap: "Spatial distribution of NH3 and VOC emission changes from CCS emissions to NEI2020 emissions: This is computed reverse manner to the PM2.5 figure. "
#| fig-subcap: 
#|   - "NH3"
#|   - "VOC"
#| layout-nrow: 2

import matplotlib.pyplot as plt
import matplotlib.image as img

# Emissions species
pollutants = ["NH3","VOC"]

for pollutant in pollutants:
    img_path = f"{emis_output_path}/{pollutant}_Relative_Difference_with_basemap.png"

    # Read the PNG image file
    image = img.imread(img_path)

    # Display the image

    fig, ax = plt.subplots(figsize=(4, 6))  # Adjust this to control final figure size
    ax.imshow(image)
    ax.axis('off')
    plt.tight_layout(pad=0)  # Remove extra padding
    plt.show()
```


# Modeling Approaches

To evaluate the impacts of CCS on air quality and public health, we employed two well-established models: INMAP (Intervention Model for Air Pollution) and BenMAP (environmental BENefits Mapping and Analysis Program). InMAP is a reduced-complexity, Eulerian air quality model that estimates estimates annual-average concentrations of PM2.5 by simulating both primary and secondary PM formation. It is designed for emissions-to-health assessments and operates on a variable-resolution grid (~1 km in urban areas). @tbl-inmap-description outlines the InMAP simulation configurations used in this study.

```{python}
#| label: tbl-inmap-description
#| tbl-cap: Description of INMAP simulations used in this study  
#| tbl-colwidths: [20,60]

import pandas as pd

df = pd.read_csv(f'/Users/yunhalee/Documents/LOCAETA/LOCAETA_AQ/method_descriptions/{run_name}_simulations_description.csv')

from great_tables import GT
GT(df)
```

BenMAP is used to estimate the health outcomes and their monetized impacts attributable to changes in PM2.5 exposure. We considered six health endpoints and stratified the results by race and ethnicity when possible:
- Asthma exacerbation: cough, wheezing, and shortness of breath
- Workday loss
- All-cause mortality (Two approaches; Di et al. and Pope et al.)

@tbl-benmap-description summarizes the health endpoints and valuation methods used in our BenMAP analysis. It used the InMAP outputs that are spatially aggregated to the county level to match BenMAP's resolution requirements.


:::{.tbl #tbl-benmap-description}

<table style="width:100%; border-collapse: collapse; font-size: 0.95em;">
  <thead style="text-align: center; border-top: 2px solid #ccc; border-bottom: 2px solid #ccc">
    <tr>
      <th style="padding: 8px;">Health endpoint</th>
      <th style="padding: 8px;">Race-ethnic stratified</th>
      <th style="padding: 8px;">Reference</th>
      <th style="padding: 8px;">Valuation method</th>
    </tr>
  </thead>
  <tbody>
    <tr style="border-bottom: 2px solid #ccc;">
      <td style="padding: 8px;" rowspan="3">
        Asthma exacerbation
        <ul style="margin: 0; padding-left: 18px;">
          <li>Cough</li>
          <li>Wheezing</li>
          <li>Shortness of Breath</li>
        </ul>
      </td>
      <td style="padding: 8px;" rowspan="3">All, Black</td>
      <td style="padding: 8px;" rowspan="3">Ostro et al. (2001)<br>Age: 8–13</td>
      <td style="padding: 8px;" rowspan="3">
        WTP (Willingness to Pay): 1 symptom-day,<br>
        Dickie and Ulery (2002)<br>
        LogNormal | 0–17
      </td>
    </tr>
    <tr style="border-bottom: 2px solid #ccc;"></tr>
    <tr style="border-bottom: 2px solid #ccc;"></tr>

    <tr style="border-bottom: 1px solid #ccc;">
      <td style="padding: 8px;" rowspan="2">Mortality</td>
      <td style="padding: 8px;" rowspan="2">All, Black, White, Asian,<br>Hispanic, and NatAmer</td>
      <td style="padding: 8px;">Di et al. (2017)<br>Age: over 64</td>
      <td style="padding: 8px;" rowspan="2">
        VSL (Value of Statistical Life), based on 26 value-of-life studies, with Cessation Lag, 3% d.r.<br>
        Weibull | 0–99
      </td>
    </tr>
    <tr style="border-bottom: 2px solid #ccc;">
      <td style="padding: 8px;">Pope et al. (2019)<br>Age: over 30</td>
    </tr>

    <tr style="border-bottom: 2px solid #ccc;">
      <td style="padding: 8px;">Workday loss</td>
      <td style="padding: 8px;">All</td>
      <td style="padding: 8px;">Ostro (1987)<br>Age: 18–64</td>
      <td style="padding: 8px;">
        Median daily wage, county-specific<br>
        None | 18–65
      </td>
    </tr>
  </tbody>
</table>
Description of BenMAP health endpoints and valuation used in this study
:::


# Air Quality Impacts

@fig-area-avg-all-runs presents the area-weighted average concentrations of various air pollutant species across different runs. The vertical axis represents concentration changes in micrograms per cubic meter (μg/m³), with positive values indicating increases and negative values indicating decreases in pollutant concentrations. The horizontal axis displays nine air quality species: NH3 (ammonia), SOA (secondary organic aerosols), NOx (nitrogen oxides), SOx (sulfur oxides), PNH4 (particulate ammonium), PNO3 (particulate nitrate), PSO4 (particulate sulfate), PrimPM25 (primary PM2.5), and TotalPM25 (total PM2.5). It shows how each run scenario affects the atmospheric composition of different pollutants. The concentration changes, in terms of trend and mangnitude, align closely with the emission reductions. 

```{python}

#| label: fig-area-avg-all-runs
#| fig-cap: "Change of area-weighted average of air quality species for all runs"

import matplotlib.pyplot as plt
import matplotlib.image as img


img_path = f"{inmap_output_path}area_weighted_averages_all_{run_name}.png"
image = img.imread(img_path)

# Optional: dynamically scale down the image
fig, ax = plt.subplots(figsize=(6, 4))  # Adjust this to control final figure size
ax.imshow(image)
ax.axis('off')
plt.tight_layout(pad=0)
plt.show()
```


Subsequent analysis focuses on total PM2.5 concentrations, which are the primary driver of health impacts. @fig-spatial-concentrations  presents spatial maps showing the percent changes in total PM2.5 concentrations across all runs. The color scale ranges from blue (representing decreases in PM2.5) to red (representing increases), with intensity indicating the magnitude of change.

```{python}

#| label: fig-spatial-concentrations
#| fig-cap: "Spatial distribution of percent changes in total PM₂.5 concentrations across all runs"
#| fig-subcap: true

import matplotlib.pyplot as plt
import matplotlib.image as img

for run in run_list: 
    img_path = f"{inmap_output_path}/{run}/TotalPM25_Percent Change_with_basemap.png"
    image = img.imread(img_path)

    # Optional: dynamically scale down the image
    fig, ax = plt.subplots(figsize=(8, 10))  # Adjust this to control final figure size
    ax.imshow(image)
    ax.set_title(f"Run: {run}", loc='left', fontdict={'fontsize': 20, 'fontweight': 'bold'})  # This acts like a sub-caption

    ax.axis('off')
    plt.tight_layout(pad=0)
    plt.show()
```


# Public Health Impacts
Comprehensive analysis of health impacts across runs are provided in this section, with results stratified by race-ethnicity and measured through the various health endpoints. Our goal is to collectively provide a multidimensional view of how various run scenarios affect public health outcomes across different demographic groups, measured both in health terms and economic value.

@fig-health-impact-all-runs illustrates the absolute health benefits across runs for six key health endpoints: asthma exacerbation (cough, shortness of breath, and wheeze), mortality (calculated using two different methodologies by Di et al. and Pope et al.), and work loss days. The data is stratified primarily by race-ethnicity categories (ALL, BLACK, ASIAN, HISPANIC, NATAMER, and WHITE). The vertical axis represents health benefits, with positive values indicating improvements and negative values indicating negative impacts. Different runs are represented by different colored bars. 

```{python}

#| label: fig-health-impact-all-runs
#| fig-cap: "Impact on health benefits across all runs"

import matplotlib.pyplot as plt
import matplotlib.image as img


img_path = f"{benmap_inc_output_path}/{run_name}/Health Benefits.png"
image = img.imread(img_path)

# Optional: dynamically scale down the image
fig, ax = plt.subplots(figsize=(8, 4))  # Adjust this to control final figure size
ax.imshow(image)
ax.axis('off')
plt.tight_layout(pad=0)
plt.show()
```

@fig-normalized-health-impact-all-runs presents the same health endpoints as @fig-health-impact-all-runs but normalizes the benefits by population size (per million people). This normalization allows for more equitable comparison across demographic groups of different sizes. The health endpoints and runs remain consistent with @fig-health-impact-all-runs. The normalization reveals per capita impacts, highlighting potential disparities in health benefits that might be obscured in absolute numbers.


```{python}

#| label: fig-normalized-health-impact-all-runs
#| fig-cap: "Impact on health benefits normalized by the population (in miilion) across all runs"

import matplotlib.pyplot as plt
import matplotlib.image as img

img_path = f"{benmap_inc_output_path}/{run_name}/Normalized Health Benefits  (per million).png"
image = img.imread(img_path)

# Optional: dynamically scale down the image
fig, ax = plt.subplots(figsize=(8, 4))  # Adjust this to control final figure size
ax.imshow(image)
ax.axis('off')
plt.tight_layout(pad=0)
plt.show()
```


@fig-mortality-all-runs displays only the premature mortality results for all race-ethnicity groups from @fig-health-impact-all-runs, as mortality represents the most significant health impacts. The figure shows the annual number of avoided premature deaths and compares estimates computed using the two different mortality risk functions (Di et al. vs Pope et al.). 

```{python}

#| label: fig-mortality-all-runs
#| fig-cap: "Annual number of avoided premature deaths across all runs"

import matplotlib.pyplot as plt
import matplotlib.image as img

img_path = f"{benmap_inc_output_path}/{run_name}/Health Benefits only mortality.png"
image = img.imread(img_path)

# Optional: dynamically scale down the image
fig, ax = plt.subplots(figsize=(8, 4))  # Adjust this to control final figure size
ax.imshow(image)
ax.axis('off')
plt.tight_layout(pad=0)
plt.show()
```

@fig-monetized-health-impact-all-runs translates the health impacts into monetary values (in million dollars), providing an economic perspective on the health benefits of each run. The vertical axis shows monetized health benefits per million dollars, maintaining the same stratification by race-ethnicity and health endpoints as the previous figures. Mortality is the primary contributor to the total menetary values. The two mortality estimate approaches (Di et al. vs Pope et al.) yield noticeably different results, which is also reflected in their respective health benefits estimates. This economic quantification enables cost-benefit analysis of the different run scenarios and highlights which interventions may provide the greatest economic return through health improvements. 


```{python}

#| label: fig-monetized-health-impact-all-runs
#| fig-cap: "Monetized health benefits (in miilion dollars) across all runs"

import matplotlib.pyplot as plt
import matplotlib.image as img

img_path = f"{benmap_value_output_path}/{run_name}/Monetized Health Benefits  (per million $).png"
image = img.imread(img_path)

# Optional: dynamically scale down the image
fig, ax = plt.subplots(figsize=(8, 4))  # Adjust this to control final figure size
ax.imshow(image)
ax.axis('off')
plt.tight_layout(pad=0)
plt.show()
```

Because the total monetary value of health benefits is largely driven by reduction in mortality, we present the monetized health benefit by mortality separately in @fig-monetized-mortality-all-runs. As shown in @fig-mortality-all-runs, the choice of mortality risk functions - Di et al. vs Pope et al. - results in a signnificant difference in the estimated total monetaried benefits. 

```{python}

#| label: fig-monetized-mortality-all-runs
#| fig-cap: "Monetized health benefits by mortality (in miilion dollars) for all runs"

import matplotlib.pyplot as plt
import matplotlib.image as img

img_path = f"{benmap_value_output_path}/{run_name}/Monetized Health Benefits  (per million $) only mortality.png"
image = img.imread(img_path)

# Optional: dynamically scale down the image
fig, ax = plt.subplots(figsize=(8, 4))  # Adjust this to control final figure size
ax.imshow(image)
ax.axis('off')
plt.tight_layout(pad=0)
plt.show()
```
