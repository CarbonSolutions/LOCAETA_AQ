base_dirs:
  project_root: "/Users/yunhalee/Documents/LOCAETA"
  output_root: "/Users/yunhalee/Documents/LOCAETA/LOCAETA_AQ/outputs"
  inmap_root: "/Users/yunhalee/Documents/LOCAETA/RCM/INMAP/inmap-1.9.6-gridsplit"
  benmap_root: "/Users/yunhalee/Documents/LOCAETA/RCM/BenMAP" 
  nei_root: "/Users/yunhalee/Documents/LOCAETA/NEI_emissions/NEI_2020_gaftp_Jun2024"
  nei_output_root: &nei_output "/Users/yunhalee/Documents/LOCAETA/RCM/INMAP/evaldata_v1.6.1/2020_nei_emissions"
  ccs_root: "/Users/yunhalee/Documents/LOCAETA/CCS_emissions"
  datacenter_root: "/Users/yunhalee/Documents/LOCAETA/DataCenter_emissions"
  electrification_root: "/Users/yunhalee/Documents/LOCAETA/Electrification"
  report_root: "/Users/yunhalee/Documents/LOCAETA/reports"

stages:
  scenario: datacenter_emissions # name must match with the available emissions below
  run_names: 
    - current_2020
    - 2050_decarb95
  run_only_base_run: true
  run_only_separate_case: false # if the runs in run_names are already available, set this true, so it can skip running them again
  separate_case_per_each_run: # Use this to get CAMBIUM region specific run
  #  - CAISO
  #  - PJM_East
  run_nei: true
  run_inmap: true
  analyze_inmap: true
  run_benmap: true
  run_report: false

inmap:
  input:
    toml_dir: eval                  # append to inmap_root in Python
    toml_template: nei2020Config_template.toml
    input_dir: *nei_output           
  output:
    output_dir: outputs            # append to inmap_root in Python
    plots_dir: inmap               # append to output_root in Python
  analyze:
    default_base_run: base_nei2020_jun2025 # inmap run name 
    map_only_these_state_regions:  # Don't use this for the CONUS runs
      # LA: # Set with two letter state 
      #   - "22" # Corresponding FIPS (must be in string)
      #   - "05" # Neighboring FIPS, if needed 
      #   - "28"
      #   - "48" 

benmap:
  input:
    input_dir: inmap_output         # under benmap_root
    model_path: batchmode           # under benmap_root
  output:
  # output_dir doesn't need to be defined, as all outputs are saved under the benmap_root/APVR 
    plots_dir: benmap              # append to output_root in Python

report:
  input:
    qmd_file: LOCAETA_report.qmd    # under report_root
  output:
    output_dir: out                 # under report_root
  options:
    render: true

##########################
### Emission Scenarios ###
##########################

# nei_emissions are basis for all scenarios. 
# The nei output files must be available for other emission processing. 
# input directory names (e.g., "2020ha2_cb6_20k/inputs") follows the one from the source NEI zip files.
# zip files are obtained from https://gaftp.epa.gov/air/emismod/2020/2020emissions/
nei_emissions:
  input:
    nei_raw_data_dir: 2020ha2_cb6_20k/inputs # append to nei_root in Python
    county_shapefile_dir: emiss_shp2020/Census/cb_2020_us_county_500k.shp   # append to nei_root in Python
    target_crs: "+proj=lcc +lat_1=33.000000 +lat_2=45.000000 +lat_0=40.000000 +lon_0=-97.000000 +x_0=0 +y_0=0 +a=6370997.000000 +b=6370997.000000 +to_meter=1"
    netcdf_dir: netcdf/annual  # append to nei_root in Python
    netcdf_filenames: 
      - cb6_20k_onroad
      - rail
  output:
    output_dir: *nei_output
    plots_dir: emissions/NEI2020  # append to output_root in Python
    combined_pt_source_file: combined_NEI2020_pt_oilgas_ptegu_ptnonipm_w_sectors.shp # nei_output_root in Python
    state_emissions_sum: total_emissions_by_state_and_species.csv  # nei_output_root in Python
  target_scenario : base_nei2020_sep2025
  has_own_base_emission: false

ccs_emissions:
  input:
    raw_csv_dir: USA-compiled-cobenefits-emissions-withSCC-v4.csv  # append to ccs_root in Python
  output:
    ccs_clean_file_dir: USA-compiled-cobenefits-emissions-withSCC-v4_ghgrp_subpart_sum_test.csv # append to ccs_root in Python
    output_dir: output 
    plots_dir: emissions # append to output_root in Python
  target_scenario: USA_CCS
  separate_scenario: # this will be generated as part of USA_CCS processing, but they are separate scenarios from target_scenario
    - type: state_all_facilities
      fips: "22"
      name: "LA" # State abbreviation 
    - type: state_specific_facilities
      fips: "08"
      name: "CO" # State abbreviation 
      facilities_file_dir: final_output_1_manual_update_noLandfill.csv # append to ccs_root in Python
    - type: industrial_no_ccs
  has_own_base_emission: false # NEI2020 is the base for ccs_emissions 
  note:  "each scenario also have 'wo_NH3_VOC' emissions"

datacenter_emissions:
  input:
    raw_csv_dir: "."
  output:
    output_dir: output
    plots_dir: emissions  # append to output_root in Python
    plots_diagnostics: true
#    plots_percent_change: true
#    plots_distribution: false
  target_scenario:
    - current_2020
    - 2050_noIRA_111D
    - 2050_decarb95
  separate_scenario: # this will be generated as part of target_scenario processing, but they are separate scenarios from target_scenario
    - CAISO
    - PJM_East
    - MISO_Central
    - MISO_South
    - NorthernGrid_West
    - SPP_North
  has_own_base_emission: true # each target_scenario has their own base emissions
  note:  "CAMBIUM regional scenarios are per each target_scenario"

electrification_emissions:
  input:
    raw_csv_dir: "."
  output:
    output_dir: output
    plots_dir: emissions # append to output_root in Python
  master_scenario: Full_USA # set Full_USA or Food_Agr 
  target_scenario:
    - current_easyhard
    - 2050_easyhard_noIRA_111D
    - 2050_easyhard_decarb95
  has_own_base_emission: true  # each target_scenario has their own base emissions
  note:  "target_scenario emissions are under the master_scenario directory"